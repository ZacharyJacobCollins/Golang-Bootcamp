Currently on Day 2 Video 1   -  8 mins in
https://www.golang-book.com/guides/bootcamp

everything before day 3 really



Tumblr golang examples
http://golang-examples.tumblr.com/post/43135765795/simple-file-server



do all of week 2

----------------------------------------------------------------

Huge part of software dev is learning how to read code

----------------------------------------------------------------

eplonential retry i increasing wait time till retry exponentially
----------------------------------------------------------------





addr = ":http"  is the default port 80



----------------------------------------------------------------


heart of go is a for loop


----------------------------------------------------------------





----------------------------------------------------------------
gobindata can be used to have all the files or whatever

----------------------------------------------------------------


image files are just giant color thins really, giant so larger than text
----------------------------------------------------------------













----------------------------------------------------------------
http://blog.golang.org/concurrency-is-not-parallelism

go bindata

Still need to go back and do Golang Bufio
Golang Scanner

Golang Bufio Scanner
Golang String Replace
Golange CSV


ONly use pointers when you can't use anything else.
----------------------------------------------------------------
Channels have a type

func stuff (thisvarisachan chan string) {


}




multiplexer is just the route config


To just send a file, use


 http.Servefile





----------------------------------------------------------------
COPYING a file

io.COPY

----------------------------------------------------------------
Slices break input for ram, as well as flexibility to process it in parts
----------------------------------------------------------------
hash takes a large number turns it small

non-crypto hash not hard to go either direction.

cryptographic is hard to go one direction

----------------------------------------------------------------
Hashes could be used to comare files


go makes it easy to ensure correctness


----------------------------------------------------------------
s crypt and decrypt run sha lots and lots of times.  slows stuff down to limit things



http://blog.golang.org/concurrency-is-not-parallelism
----------------------------------------------------------------
Callback is a function called by a function


----------------------------------------------------------------
concurrency in go is handled with go keyword

so can just call function called conncurrent (num int)

like go concurrent(0)

that easy


----------------------------------------------------------------

----------------------------------------------------------------




----------------------------------------------------------------







----------------------------------------------------------------







----------------------------------------------------------------





Can embed interfaces in interfaces to access other methods



----------------------------------------------------------------
if a checksum chnages the file changes.


or has changed
  can use in fnv


----------------------------------------------------------------
BUFIO
buffered writer writes many bytes at once instead of one at a time..   less expensive

Use the scanner often in buff io

scanner := bufio.NewScanner(srcFile
for scanner.Scan() {
	linne:=scanner.Text()
	fmt.Println(line)

}
//scans and prints line by line

/if need to interact w file line by line use a scanner.

strings.toUpper[1] is to capitalize second letter

strings.toUpper[0] is to capitalize first letter

https://youtu.be/ptbe-2aBFJI?list=PLH0INGR--ZGSO9VleUTtimDj9blPrbYmM

if line is emptu check if line is >0 then do shit like uppercase.


----------------------------------------------------------------


io.copy is superior to readall



io.COPY(os.Stdout, f) where f is the file


----------------------------------------------------------------


MAP SYNTAX
----------------------------------------------------------------
  elements := make(map[string]string)
  elements["H"] = "Hydrogen"
  fmt.Println(elements["H"])


  elements := map[string]map[string]string{
    "H": map[string]string{
      "name":  "Hydrogen",
      "state": "gas",
    },
  }

  if el, ok := elements["H"]; ok{
    fmt.Println(el["name"], el["state"])
  }


Deleting from a map
func main() {
    boobs := make(map[string]string)
    boobs["A"] = "small"
    boobs["B"] = "kinda small"
    boobs["C"] = "fuckable"
    boobs["D"] = "give her the d"

    fmt.Println("Displaying the map: ")
    for c := range boobs {

      fmt.Println(c, boobs[c])
    }
    fmt.Println("Which would you like to delete?")
    delete1 :=""
    fmt.Scanf("%s", &delete1)

    delete(boobs, delete1)
    fmt.Println("Displaying the map: ")
    for c := range boobs {

      fmt.Println(c, boobs[c])
    }



----------------------------------------------------------------


md5 and sha1 are both not secure




----------------------------------------------------------------



golang walk
----------------------------------------------------------------




use sha256 and that is secure

have to slow hashing down to make it secure.





----------------------------------------------------------------
Functions


to return two can do h, even := half(2)




Callbacks are like

return func() int {
	x++
	return x
}




----------------------------------------------------------------

DEFER PANIC AND RECOVER



A defer statement pushes a function call onto a list. The list of saved calls is executed after the surrounding function returns. Defer is commonly used to simplify functions that perform various clean-up actions.

func CopyFile(dstName, srcName string) (written int64, err error) {
    src, err := os.Open(srcName)
    if err != nil {
        return
    }

    dst, err := os.Create(dstName)
    if err != nil {
        return
    }

    written, err = io.Copy(dst, src)
    dst.Close()
    src.Close()
    return
}


----------------------------------------------------------------
GOLANG JS







----------------------------------------------------------------



CROSS SITE SCRIPTING


----------------------------------------------------------------
STRUCTS

Syntax

type Address struct {
   Number string
   Street string
   City   string
   State  string
   Zip    string
}


Object inhereitance
type Person struct {
   Name string
   Address Address
}

type Address struct {
   Number string
   Street string
   City   string
   State  string
   Zip    string
}

func (p *Person) Talk() {
    fmt.Println("Hi, my name is", p.Name)
}

func (p *Person) Location() {
    fmt.Println("Iï¿½m at", p.Address.Number, p.Address.Street, p.Address.City, p.Address.State, p.Address.Zip)
}

func main() {
    p := Person{
        Name: "Steve",
        Address: Address{
            Number: "13",
            Street: "Main",
            City:   "Gotham",
            State:  "NY",
            Zip:    "01313",
        },
    }

    p.Talk()
    p.Location()
}





----------------------------------------------------------------
To generate an html file do

profile-maker > index.html





----------------------------------------------------------------
New vs Make


----------------------------------------------------------------
hex/encode package

h.Sum(nil) will give you bytes need to turn it into hex





----------------------------------------------------------------
POINTERS/REFERENCES
 How do you get the memory address of a variable?

How to assign

Pass by reference vs pass by copy


Pointers take the address, and pass it in


ML for notes?


Star makes it go to the same place




func zero(xPtr *int) {   //the asterisk here is a pointer to an int
  *xPtr  = 0   //
  fmt.Println(xPtr, *xPtr)
}

func main()  {
  x := 5
  zero(&x)
}


First print out would be hex address space


*&x would reference and then dereference a pointer.  They cancel.



Advantages come when instead of making  a copy of something that has a lot of data you can just reference that memory block


to access the index


*x is the value of the pointer



----------------------------------------------------------------
MAKE vs NEW
new creates a new pointer to something.






----------------------------------------------------------------
OOP







----------------------------------------------------------------
READER


in OS package


if file is opened gotta close it.  defer file.Close()


package main

import (
  "fmt"
  "io/ioutil"
  "log"
  "os"
)

func main()  {
  //my-cat filename
  //os.Args[0] == my-cat
  //os.Args[1] == filename
  var file string
  fmt.Scanf("%s", &file)


  f, err := os.Open(file)
  if err != nil {
    log.Fatalln("died", err.Error())
  }
  defer f.Close()

  bytes, err := ioutil.ReadAll(f)

  if err != nil {
    log.Fatalln("dead")
  }

  str:=string(bytes)

  fmt.Println(str)
}

Queries for file







Cat recreation


----------------------------------------------------------------




CREATE A FILE
package main

import (
  "os"
  "log"
)

func main() {
  f, err := os.Create(os.Args[1])
  if err != nil {
    log.Fatalln("done", err.Error())
  }
  defer f.Close();

  str:= "txt"
  bs := []byte(str)

  _, err = f.Write(bs)
  if err != nil {
    log.Fatalln("done", err.Error())
  }

}


also can use os.mkdir


os.Mkdir expects permissions


ex

err:= os.Mkdir("/anewfolder", 0x777)





----------------------------------------------------------------

READER

Can also use reader in strings package



package main

import (
  "fmt"
  "io/ioutil"
  "log"
  "os"
)

func main()  {
  f, err := os.Open("hello.txt")
  if err != nil {
    log.Fatalln("died", err.Error())
  }
  defer f.Close()

  bytes, err := ioutil.ReadAll(f)

  if err != nil {
    log.Fatalln("dead")
  }

  str:=string(bytes)

  fmt.Println(str)
}



----------------------------------------------------------------


----------------------------------------------------------------


----------------------------------------------------------------


----------------------------------------------------------------


----------------------------------------------------------------


----------------------------------------------------------------






ON html


ARRAYS AND SLICES

Slice is a dynamic array
   var x [5]float64        array size of 5
   var x []float64         slice no size
   x := make([]float64, 5) use make to make a slice of a fixed size
append is a thing
Data over a network is typical to come in as a slice of bytes



MAPS

key value pairs



CODING



	Variables + Scope
Global variables outside of functions at top
Can only use var x := 9; inside a function
At top if wanting to use duck type do var x = 9;
Declarations up top, if explicit.
cannot do var name string = "zac"; and then later change it to name = 9;
Cannot redefine variables
Variables declared at top level, useable for whole package/directory.
Package imports are only applicable at the file level
Functions are file scope
Constants can be declared after imports and before functions to be directory scope with parantheses, ex.
		const (
 			x = 13;
  			y = 13;
		)
Imports can also be declared or imported in the same way with parans, ex.
		import (
   		"fmt"
 	     "os"
	)
_ is the blank identifer, like not use it or get rid of it, use it say when a function returns two variables.  Go makes you use both, assign one to a blank identifer so you don't need to utilize it.  Using it in a perfunctory way is bad code.
float64 64 bits

Imports
Blank identifier to not throw error import _ "fmt" imports nothing
Can name imports fmt input "fmt"
imports such as "io/ioutil" use the last name in the path as the variable reference
There is a math package
"strconv"
If you want to access a var from another package it has to be a capital letter


	Functions
Functions can return multiple values
Standard in you can do fmt.Scan("%s", &reference)
fmt out concatenate with a , instead of +




Errors

log package

log.Fatalln("broke")  equivalent to Println and the system.exit(1)

To return erros use _, err := (whatever here)

	Strings
Chinese are 4 bytes per character, multibyte character encoding.
Backticks for multiple lines of a string ``
Have a definite size can get the ascii value len, with len(str)
Print out "hello" + fmt.Sprint(name)
Can cast to an integer to pring out next to a string.
This would return a byte value fmt.Println(x[2]), need to have 2 characters available.  runtime error if not long enough.  Ex.  "Hello World" printed fmt.Println(x[13])  would throw a runtime err because Hello World is only 10 characters
Everything is stored as 1s and 0s




TYPES

String is lowercased
Integers, can only be so big
uint, can't be negative, unsigned integer
Print with single quotes 'x' utf-8 style
-bool
-string - are represetned as uint8 in computer
-int
-byte (same as uint8)
-float64
-[]bytes
Can convert floating point numbers with fmt.Sprint


FLOW CONTROL
		For Loops

Range iterates through stuff

Range iterates over shit, and through strings
		Ex.   for i, c := range "test" {
   			 fmt.Println(i, c)
 			 }
		Spits out index and the value of each char.  			range goes over chars and the for loop gives the 			index
Range is a version of a for loop
  cond := true
  for cond {
    fmt.Println("BIJ BAJ")
    cond = false
  }
Iterates over the condition once for true
Infinite loop is just for { }

		If Statements
No assignment in condition

<< left shift
>> right shift

to toss a range counter in there as well
  for i, c:= range "something" {
    fmt.Println(i, c)
  }


---------------------------------------------------------------------------------------------------------------------------------------------------------
 Switch Statement
switch i {
	case 0 : fmt.Println("currently zero")
}
Super nice bc don't have to break.  Breaks when case makes sense.  If it doesn't and you want it to continue, then you use fallthrough where you would normally put break.
wayy more complex
go have to use fallthrough.  Different than javascript for example.
labels
this would break from the switch statement and the for loop
func main() {

for i := 0; i< 10; i++ {
  if i ==0 {
    doSomething()
    continue
  }
}
    breakMe:=false
    i:=10
    switch {
    case i == 42:
      breakMe = true
    case i == 43:
    case i == 44:
    case i >100
      fmt.Println("HI")
    if (breakMe) {
      break
    }
}

aalso coudl do it ....

outer:
func main() {

for i := 0; i< 10; i++ {
  if i ==0 {
    doSomething()
    continue
  }
}
    breakMe:=false
    i:=10
    switch {
    case i == 42:
      break outer
    case i == 43:
    case i == 44:
    case i >100
      fmt.Println("HI")
    if (breakMe) {
      break
    }
}

multiple expressions for a switch statement can do with commas, i.e.  case 1,2,3,4 etc.


with a label.
---------------------------------------------------------------------------------------------------------------------------------------------------------


Strings---------------------------------------------------------------------------------------------------------------------------------------------------------
all found here
https://godoc.org/strings#ToTitle

ITOA

  fmt.Println(strings.replace("Hello <NAME>", "<NAME>", "Zac", 1))
the above replaces <NAME> 1 time with Zac
strings package, ToTitle turns it to uppercase chars
Title just capatilizes stuff




---------------------------------------------------------------------------------------------------------------------------------------------------------

Memory
Ampersand is like address
Stack vs Heap
Stack disappears every time
Heap - any function can create and reference, GO heap is automatically garbage collected.  C s not.

byte is the same as UINT8






SETUP

need a workspace folder that contains pkg, bin, and src




TIPS

Single quotes evals as is

Documentation here <https://golang.org/package/fmt> actually has source code for fmt.

To create a package in go that isn't buildable use for example package fmt as opposed to package main.  Package main is an entry point







COMMANDS

godoc fmt will give documentation for fmt

Go Build builds and puts all in executables in directory

Go Install installs and places the shit into go install

go run -x (go file here)    tells you what go run is doing

GO GET is like saying git clone then go install

cat /usr/local/go/src/fmt/print.go | grep Println

searches large block of text for println.   Feeds cat to grep
